<div {{ field_type.locale ? 'lang=' ~ field_type.locale }} class="
            form-group
            {{ form.hasErrors() ? form.hasError(field_type.input_name) ? 'has-danger has-error' : 'has-success' }}
            {{ field_type.input_name }}-field
            {{ field_type.slug }}-field_type
            {{ field_type.hidden ? 'hidden' }}
            ">

    {% if field_type.object.label != false and field_type.config.disable_label != true %}
        <label class="control-label" for="{{ field_type.attributes.id }}">
            {{ field_type.object.label|raw }}

            {% if field_type.required %}
                <span class="required">*</span>
            {% endif %}

            {% if field_type.locale %}
                {% include "streams::form/partials/translations" %}
            {% endif %}
        </label>
    {% endif %}

    {% if field_type.instructions %}
        <p class="text-muted">{{ field_type.instructions|raw }}</p>
    {% endif %}

    {% if field_type.warning %}
        <p class="help-block">
            <span class="text-warning">
                {{ icon('warning') }}
                {{ field_type.warning|raw }}
            </span>
        </p>
    {% endif %}

    <div class="input-wrapper">
        {{ field_type.getInput({'form': form})|raw }}
    </div>

</div>

{% if field_type.required %}
    <script>
        if (typeof inputsTrans === 'undefined') {
            var inputsTrans = {
                {{ field_type.attributes.id }}: {
                    label: `{{ field_type.object.label }}`,
                    lang: `{{ field_type.object.locale }}`
                }
            }
        } else {
            inputsTrans.{{ field_type.attributes.id }} = {
                label: `{{ field_type.object.label }}`,
                lang: `{{ field_type.object.locale }}`
            }
        }

        var createAllErrors = function() {
            var form = $( this );

            var showAllErrorMessages = function() {
                console.log(123)
                // Find all invalid fields within the form.
                var invalidFields = form.find( ":invalid" ).each( function( index, node ) {

                    // Find the field's corresponding label
                    if (node.nodeName !== 'FIELDSET') {
                        var label = inputsTrans[node.id],
                            // Opera incorrectly does not fill the validationMessage property.
                            message = node.validationMessage || 'Invalid value.';

                        alert(label.label + (label.lang ? ' (' + label.lang + ')' : '') + ': ' + message)
                    }
                });
            };

            // Support Safari
            form.off( "submit").on( "submit", function( event ) {
                if ( this.checkValidity && !this.checkValidity() ) {
                    $( this ).find( ":invalid" ).first().focus();
                    event.preventDefault();
                }
            });

            $( "input[type=submit], button:not([type=button])", form )
                .off( "click").on( "click", showAllErrorMessages);

            // $( "input", form ).off( "keypress").on( "keypress", function( event ) {
            //     var type = $( this ).attr( "type" );
            //     if ( /date|email|month|number|search|tel|text|time|url|week/.test ( type )
            //         && event.keyCode == 13 ) {
            //         showAllErrorMessages();
            //     }
            // });
        };

        $( "form" ).each( createAllErrors );
    </script>
{% endif %}
